from spec import *
from scipy.io.idl import readsav

grids_dic = {
'nlte_10.1.6_SOLAR_expoclump_2019-10-24': ('BSgs_CNOSiMg_old',1),
'nlte_10.1.6_bdwarfs_SOLAR_2020-01-29': ('BDws_CNOSIMg_old',2),
'nlte_10.4.7_OB.Sg_SOLAR_2021-01-23': ('OBSgs_hot_NOSi_new',3),
'nlte_10.4.7_late.bsgs_SOLAR_expoclump_NOSi.djl_2021-02-06': ('BSgs_cool_NOSi_new',4),
'astar2013_SOLAR_2_LMC_4_grid_2019-10-24_2019-10-24.idl' : ('ASgs_new',5)}


def mauipath(path=None):
    '''
    Function to set the main directory of MAUI.

    Parameters
    ----------
    path : str, optional
        If 'default' or 'def', it will choose the default path (see below).

    Returns: Selected MAUI main directory path.
    '''

    if path in ['def','default']:
        if platform.system() == 'Darwin':
            defmainpath = '/Users/abelink/Documents/MAUI/'
        elif platform.uname().node == 'msi':
            defmainpath = '/home/abelink/Documents/MAUI/'
        elif platform.uname().node == 'dardo.ll.iac.es':
            defmainpath = '/net/nas/proyectos/hots/masblue/maui2021/RESULTS_BSGS_202101/'

        mainpath = defmainpath

    elif path == None:
        mainpath = input('Working directory path (default is %s) : ' %defmainpath)
        if mainpath == '': mainpath = defmainpath

    else: mainpath = path

    return mainpath

mauidir = mauipath('def')


class idl():
    def __init__(self, idlfile):
        '''
        Parameters
        ----------

        idlfile : str
            Enter the input spectrum full path to the .idl file.
        '''

        idldata = readsav(idlfile)
        #for i in idldata.keys():
        #    try: print(i,len(idldata[i]))
        #    except: print(i)

        self.file_name = idldata.aa[0][3].decode()
        self.name_star = self.file_name.split('_')[0]
        self.resolution = int(self.file_name.split('_V')[-1][0:5])
        self.gridname = idldata.modelgridname.decode()
        self.synwave = idldata.xx_mod
        self.synflux = idldata.spec_prim
        self.dx = (idldata.xx_mod[-1]-idldata.xx_mod[0])/len(idldata.xx_mod)

        self.vsini = idldata.obsdat.spectrum[0].VSINI[0]
        self.vmac = idldata.obsdat.spectrum[0].MACRO[0]


def gen_ascii(save_dir='server', lwl=3900, rwl=5080):
    '''
    Function to generate the .dat files of the synthetic spectra generated by
    MAUI in all the .idl files found in the SOLUTION folder.

    Parameters
    ----------

    save_dir : str, optional
        Enter the directory where to save all the output spectra in ascii format.

    lwl : float, optional
        Sets the start wavelenght of the output spectrum.

    rwl : float, optional
        Sets the end wavelenght of the output spectrum.

    Returns: Nothing but the ascii .dat files are generated.
    '''

    solution_dir = mauidir+'SOLUTION/'

    if save_dir == 'local':
        save_dir = datadir+'ASCII/Synthetic_MAUI/'
    elif save_dir == 'server':
        save_dir = '/net/nas/proyectos/hots/masblue/obs_iac/spec_opt/IACOB_DB/ASCII/SYNTHETIC/'

    for file in os.listdir(solution_dir):
        if not file.startswith('._') and file.endswith('.idl'):
            idlspec = idl(solution_dir+file)

            star_db = spec(idlspec.name_star,SNR='best')

            if idlspec.file_name != star_db.file_name[:-5]:
                print('\nWARNING: %s does not match with best spectrum available.'
                % idlspec.file_name[:-5])

            else:
                #idlspec.file_name = idlspec.file_name.replace(str(idlspec.resolution),'85000')
                new_idlspec = '%s_red%i.dat' % (idlspec.file_name,grids_dic[idlspec.gridname][1])
                np.savetxt(save_dir+new_idlspec,np.c_[idlspec.synwave,idlspec.synflux],
                           fmt=('%.4f','%.6f'))

                star_idl = spec(new_idlspec,txt=True)
                star_idl.txtwaveflux(lwl,rwl)
                #plt.plot(star_idl.wave,star_idl.flux,'r',lw=.3) # plot to check
                star_idl.degrade(profile='rotmac',vsini=idlspec.vsini,vmac=idlspec.vmac)
                #plt.plot(star_idl.wave,star_idl.flux,'g',lw=.3) # plot to check

                np.savetxt(save_dir+new_idlspec,np.c_[star_idl.wave,star_idl.flux],
                           fmt=('%.4f','%.6f'))


def gen_table(tables_dir='server', input_table='MAUI_ver10.txt',
              grids_table='MAUI_grid_limits.fits', format='fits'):
    '''
    Function to generate a table with the results from MAUI given an input table
    containing the name of the stars and filename to search in the MAUI-SOLUTION
    directory.

    Parameters
    ----------

    tables_dir : str, optional
        Enter the directory where to locate the input_table and output fits.

    input_table : str, optional
        Name of the input table contaning the list of stars to search.

    Returns: Nothing but the output table with the MAUI results is generated.
    '''

    solution_dir = mauidir+'SOLUTION/'

    if tables_dir == 'local':
        tables_dir = maindir+'tables/'
    elif tables_dir == 'server':
        tables_dir = '/net/nas/proyectos/hots/adeburgos/tables/'

    table = findtable(input_table)
    grids = findtable(grids_table)

    param_lst = ['Teff','lgf','He','Micro','logQs','beta','C','N','O','Mg','Si','fcl','vcl']

    bar = pb.ProgressBar(maxval=len(table),
                         widgets=[pb.Bar('=','[',']'),' ',pb.Percentage()])
    bar.start()

    data_rows = []
    for row,i in zip(table,range(len(table))):
        file_name = row['filename']

        match = []
        for file in os.listdir(solution_dir):
            if file.endswith('.idl') and \
               file.split('_sqexp_mat1_')[1][:-14]+'RV.ascii' == file_name:
                   match.append(solution_dir+file)

        if len(match) == 0:
            print('\nWARNING: No .idl file found for %s. Continuing...' % file_name)
            continue

        elif len(match) > 1:
            match = sorted(match, key=lambda x: int(x[-14:-4].replace('-','')),reverse=True)

        idldata = readsav(match[0])

        file_name = idldata.aa[0][3].decode()
        name_star = file_name.split('_')[0]
        grid  = grids[grids['Model_name'] == idldata.modelgridname.decode()]

        star_db = spec(name_star,SNR='best')

        if file_name != star_db.file_name[:-5]:
            print('\nWARNING: %s does not match with best spectrum available.'
            % file_name[:-5])

        data_row = []; data_row.extend([name_star])
        parameters = [j.decode() for j in idldata.solution.var_label[0]] # 11/13 parameters
        for par_name in param_lst:

            if not par_name in parameters:
                data_row.extend(['',np.nan,np.nan,np.nan]); continue

            idx = parameters.index(par_name)

            #median = idldata.solution[0].sol[idx] # not used
            err_sim = idldata.solution[0].err_sol[0][idx] # symetric error of distribution at 67%

            if err_sim > abs(grid[par_name+'_UP']-grid[par_name+'_DW'])*0.25:
                sol_max = np.nan
                err_dw = grid[par_name+'_DW'][0] # Lower limit of the grid for the param
                err_up = grid[par_name+'_UP'][0] # Upper limit of the grid for the param
                label = 'd'

            else:
                sol_max = idldata.solution[0].sol_max[0][idx] # maximum of distribution
                err_dw = abs(sol_max-idldata.solution[0].hpd_interval[0][idx])
                err_up = abs(sol_max-idldata.solution[0].hpd_interval[1][idx])

                if par_name == 'logQs': sol_max -= 10

                if err_up < err_sim/2 and err_dw > err_sim/2: label = '>'
                elif err_up > err_sim/2 and err_dw < err_sim/2: label = '<'
                else: label = '='

            data_row.extend([label,round(sol_max,5),round(err_up,5),round(err_dw,5)])

        data_rows.append(tuple(data_row))

        bar.update(i)
        time.sleep(0.1)

    bar.finish()

    names = ['Name']
    for i in range(len(param_lst)):
        names = names + ['l_'+param_lst[i],param_lst[i],param_lst[i]+'_eUP',param_lst[i]+'_eDW']

    output = Table(rows=data_rows,names=(names))

    if format == 'ascii':
        output.write(tables_dir+'MAUI_results_test.csv',format='ascii.fixed_width_two_line')
    elif format == 'csv':
        output.write(tables_dir+'MAUI_results_test.csv',format='csv')
    else:
        hdu = fits.BinTableHDU(data=output.filled(np.nan))
        hdu.writeto(tables_dir+'MAUI_results_test.fits',overwrite=True)


    return('DONE')


def gen_gridlim(tables_dir='local'):
    '''
    Function to generate fits tables for each MAUI grid with the limits for each
    parameter.

    Parameters
    ----------

    tables_dir : str, optional
        Enter the directory where to save the output fits files.

    Returns: Nothing but the fits are generated.
    '''

    models_dir = mauidir+'MODELS/'

    if tables_dir == 'local':
        tables_dir = maindir+'tables/'
    elif tables_dir == 'server':
        tables_dir = '/net/nas/proyectos/hots/adeburgos/tables/'

    param_dic = {
    'Teff' : ('Teff_UP','Teff_DW'),
    'logg' : ('lgf_UP','lgf_DW'),
    #'R' : ('_','_'),
    #'logmdot' : ('_','_'),
    #'vterm' : ('_','_'),
    'beta' : ('beta_UP','beta_DW'),
    #'vatmos' : ('_','_'),
    'xf' : ('Micro_UP','Micro_DW'),
    #'[Z]' : ('_','_'),
    'clf' : ('fcl_UP','fcl_DW'),
    'vclf' : ('vcl_UP','vcl_DW'),
    'logqs' : ('logQs_UP','logQs_DW'),
    'He' : ('He_UP','He_DW'),
    'C' : ('C_UP','C_DW'),
    'N' : ('N_UP','N_DW'),
    'O' : ('O_UP','O_DW'),
    'Mg' : ('Mg_UP','Mg_DW'),
    'Si' : ('Si_UP','Si_DW')
    }

    data_rows = []
    for file in os.listdir(models_dir):
        if not file.startswith('._') and file.endswith('.idl'):
            idldata = readsav(models_dir+file)

            data_row = []; data_row.extend([file.split('.idl')[0]])
            parameters = [i.decode() for i in idldata.param_labl]
            for par_name in param_dic:

                if not par_name in parameters:
                    data_row.extend([np.nan,np.nan]); continue

                idx = parameters.index(par_name)
                if not parameters[0] == 'Teff': print('WARNING: lgf is wrong!')

                if par_name == 'logg':
                    data_row.extend([
                    (4*np.log10(idldata.param[0].max())-idldata.param[idx]-10.61).max(),
                    (4*np.log10(idldata.param[0].min())-idldata.param[idx]-10.61).min()])

                else:
                    data_row.extend([idldata.param[idx].max(),idldata.param[idx].min()])

            data_rows.append(tuple(data_row))

    names = ['Model_name']
    for i in param_dic: names = names + [j for j in param_dic[i]]

    output = Table(rows=data_rows,names=(names))

    hdu = fits.BinTableHDU(data=output.filled(np.nan))
    hdu.writeto(tables_dir+'MAUI_grid_limits.fits',overwrite=True)

    return('DONE')
